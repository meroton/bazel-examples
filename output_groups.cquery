"""
Crude pretty-printer for providers and output groups.
=====================================================


    $ bazel cquery --output=starlark --starlark:file=output_groups.cquery //path/to:target

    # Evaluate it again with each change to this file
    # https://github.com/eradman/entr
    $ echo "output_groups.cquery" \
        | entr \
        bazel cquery --output=starlark --starlark:file=output_groups.cquery //path/to:target


Nota Bene on private provider definitions
-----------------------------------------
Often language modules define their providers in private files
and re-export them through their public API (defs.bzl).
So the printed provider may not be suitable to use.

Example: PyInfo

::

    $ bazel cquery --output=starlark --starlark:file=output_groups.c

    providers:
       ...
       - @@rules_python+//python/private:py_executable_info.bzl%PyExecutableInfo
       - @@rules_python+//python/private:py_runtime_info.bzl%PyRuntimeInfo
       - @@rules_python+//python/private:py_cc_link_params_info.bzl%PyCcLinkParamsInfo
       - @@rules_python+//python/private:py_info.bzl%PyInfo

To use this one should instead load `@rules_python//python:defs.bzl%PyInfo`.
"""


LIST_SEP = "   - "
LINE_SEP = "\n" + LIST_SEP
_SEP = "\n   "

def mapPath(x):
    if x == None:
        return "None"
    else:
        return x.path

def header(x):
    return "\n" + x + ":\n"


def format(target):
    # NB: Some unusual targets do not have providers
    # Like this dep: @@bazel_tools//tools/allowlists/function_transition_allowlist:function_transition_allowlist
    _providers = providers(target)
    if not _providers:
        return ""

    __providers = LIST_SEP + LINE_SEP.join(_providers.keys())

    output = _providers.get("OutputGroupInfo", [])
    _output_groups = ""
    if output:
        pruned = [x for x in dir(output) if x not in ["to_json", "to_proto"]]
        _output_groups = LIST_SEP + LINE_SEP.join(pruned)

    res = "\n".join(["providers:", __providers, "", "output_groups:", _output_groups]) + "\n"

    # This provider is often (always?) present, but may be empty.
    key = 'FileProvider'
    if key in _providers:
        res += header(key)
        val = _providers[key]
        files = val.files_to_build.to_list()
        if files:
            joined = LINE_SEP.join([f.path for f in files])
            res += (LIST_SEP + joined) + "\n"

    key = 'FilesToRunProvider'
    if key in _providers:
        val = _providers[key]

        res += header(key)
        res += "{sep}{a}\n{sep}{b}\n".format(
            sep = LIST_SEP,
            a = mapPath(val.executable),
            b = mapPath(val.runfiles_manifest)
        )

    # NB: You may iterate over all output groups and print them here. This just checks default.
    group = "default"
    if group in output:
        res += header("OutputGroupInfo " + group)
        res += LIST_SEP + ", ".join([f.path for f in output[group].to_list()])
        res += "\n"

    return res
