# # Configure a binary based on compilation mode
# We do not use CPU here, as the official documentation example does
# because our toolchain is not setup to work on different CPUs.
# With a better toolchain it would of course work.
# Official documentation: https://bazel.build/configure/attributes
cc_binary(
    name = "ConfiguredBinary",
    srcs = ["main.c"],
    deps = select({
        ":opt_build": ["//Library:Static"],
        ":debug_build": ["//Library:Static"],
        "//conditions:default": ["//Library:Library"],
    }),
)

config_setting(
    name = "opt_build",
    values = {
        "compilation_mode": "opt",
    },
)

config_setting(
    name = "debug_build",
    values = {
        "compilation_mode": "dbg",
    },
)

# # Attempt to use a `label_flag` to switch json file.
# However, we must know the name of the *file* for the runfiles library to find it.
# And we only know the label for the flag, which conveys no information about the file.
py_binary(
    name = "Runner",
    srcs = ["run.py"],
    main = "run.py",
    # This `arg` is purely textual, we cannot reason about the real target here.
    # For this operation to work we must use a custom rule and reason about the `File` object in Starlark.
    # There we can construct command line arguments that tells the tool what file to look for,
    # and it will be whichever underlying file the flag points to.
    args = [":config_file"],
    data = [":config_file"],
    deps = ["@rules_python//python/runfiles"],
)

exports_files(["config.json"])
label_flag(
    name = "config_file",
    build_setting_default = "config.json",
    visibility = ["//visibility:public"],
)

