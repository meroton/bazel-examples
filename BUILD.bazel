load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//:symbolic.bzl", symbolic_py_binary = "py_binary")
load("//:print.bzl", "print_r")


cc_binary(
    name = "Program",
    srcs = [
        "Main.c",
    ],
    deps = [
        "//Library",
    ],
)

[
    impl(
        name = "Runner-{}".format(suffix),
        srcs = ["run.py"],
        data = [":Program"],
        main = "run.py",
        target_compatible_with = ["@platforms//:incompatible"],
        deps = ["@rules_python//python/runfiles"],
    )
    for impl, suffix in [
        (py_binary, "legacy"),
        (symbolic_py_binary, "symbolic"),
    ]
]

sh_binary(
    name = "Touch",
    srcs = ["touch.sh"],
    tags = ["manual"],
    visibility = ["//visibility:public"],
)
sh_binary(
    name = "DoNotTouch",
    srcs = ["touch.sh"],
    tags = ["manual", "DoNot"],
    visibility = ["//visibility:public"],
)

print_r(
    name = "Program.name",
    dep = ":Program",
)
# # Verify the program output against known results.
# The `outs` attribute creates an output artifact
# that can actually be used in the `diff_test`,
# but that is confusing as dependencies are customarily taken on the `name` attribute.
# And that makes it much easier to understand who uses the result of the `genrule`.
#
# Errors for missing files are a bit ugly (I removed the "e" from "capture"):
#
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10: Middleman _middlemen/test-test.sh-runfiles failed: missing input file '//:captur'
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10: Middleman _middlemen/test-test.sh-runfiles failed: 1 input file(s) do not exist
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10 Middleman _middlemen/test-test.sh-runfiles failed: 1 input file(s) do not exist

genrule(
    name = "capture",
    outs = ["XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"],
    cmd = """
        ./$(location Program) > "$@"
    """,
    tools = [":Program"],
)

diff_test(
    name = "test",
    file1 = "reference.txt",
    file2 = ":capture",
)

# # Nested py_binaries
py_binary(
    name = "py_outer",
    srcs = ["//Library:py_inner"],
    # NB(nils): the `main` must be set if the wrapper is defined in the same package
    #           If the wrapper is defined in another package the `name` can be reused,
    #           and then the main-heuristic will work provided that the main python file
    #           is called <name>.py, otherwise the name of python file in the inner library
    #           must be provided.
    main = "main.py",
)
