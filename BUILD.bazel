load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//Library:compilation-flags.bzl", "compileflags")

cc_binary(
    name = "Program",
    features = ["static_libgcc", "-pic", "-dependency_file"],
    copts = ["-g"],
    srcs = [
        "Main.c"
    ],
    deps = [
        "//Library:Library"
    ],
)

compileflags(
    name = "flags",
    dep = ":Program"
)

py_binary(
    name = "Runner",
    srcs = ["run.py"],
    main = "run.py",
    data = [":Program"],
    deps = ["@rules_python//python/runfiles"],
)

sh_binary(
    name = "Touch",
    tags = ["manual"],
    srcs = ["touch.sh"],
    visibility = ["//visibility:public"],
)

# # Verify the program output against known results.
# The `outs` attribute creates an output artifact
# that can actually be used in the `diff_test`,
# but that is confusing as dependencies are customarily taken on the `name` attribute.
# And that makes it much easier to understand who uses the result of the `genrule`.
#
# Errors for missing files are a bit ugly (I removed the "e" from "capture"):
#
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10: Middleman _middlemen/test-test.sh-runfiles failed: missing input file '//:captur'
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10: Middleman _middlemen/test-test.sh-runfiles failed: 1 input file(s) do not exist
#   ERROR: /home/nils/task/meroton/basic-codegen/BUILD.bazel:38:10 Middleman _middlemen/test-test.sh-runfiles failed: 1 input file(s) do not exist

genrule(
    name = "capture",
    outs = ["XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"],
    cmd = """
        ./$(location Program) > "$@"
    """,
    tools = [":Program"],
)

diff_test(
    name = "test",
    file1 = "reference.txt",
    file2 = ":capture",
)
