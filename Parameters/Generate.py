#!/usr/bin/env python3

"""Parse multiple `.json` files and generate a header file with defines for each attribute."""

import sys
import argparse
import json

from typing import Dict, List

from rules_python.python.runfiles import \
    runfiles  # Bazel's runfiles library, to find runtime dependencies.

def main(program, args: List[str]):
    parser = argparse.ArgumentParser()
    parser.add_argument('--output', help="Output file", required=True)
    parser.add_argument('--base', help="Base config file", required=True)
    parser.add_argument('inputs', help="input files", nargs='+')

    ns = parser.parse_args(args)
    base = ns.base
    inputs = ns.inputs
    output = ns.output

    r = runfiles.Create()
    print("lookup:", base)  # DEBUG
    found = r.Rlocation(base)
    print("found:", found)  # DEBUG

    if not found:
        print(f"Could not find base config: {base}", file=sys.stderr)
        sys.exit(1)
    inputs.append(found)

    contents: List[Dict] = [{}] * len(inputs)
    for i, input in enumerate(inputs):
        with open(input, 'r') as f:
            content = json.load(f)
            contents[i] = content

    defines = {
        k: v
        for d in contents
        for k, v in d.items()
    }
    buffer = [""] * sum([len(d) for d in contents])
    for i, (k, v) in enumerate(defines.items()):
        # NB: This example has no quoting or value handling.
        buffer[i] = f"#define {k} {v}"


    with open(output, 'w') as f:
        f.write(f"/* Generated by {program} */\n")
        f.writelines(buffer)
        f.write("\n")


if __name__ == '__main__':
    main(sys.argv[0], sys.argv[1:])
